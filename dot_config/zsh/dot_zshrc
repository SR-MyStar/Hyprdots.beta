# fortune随机诗词
fortune -e tang300 song100 | lolcat

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
LC_CTYPE="zh_CN.utf8"

# 加载zinit
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

zi ice blockf atpull'zi creinstall -q .'

autoload compinit
compinit

zi light-mode depth"1" for \
  @zdharma-continuum/zinit-annex-binary-symlink \
  @zdharma-continuum/zinit-annex-bin-gem-node \
  @zdharma-continuum/zinit-annex-default-ice \
  @zdharma-continuum/zinit-annex-patch-dl \
  @zdharma-continuum/zinit-annex-readurl
zi light-mode for \
  zdharma-continuum/zinit-annex-bin-gem-node \
  hlissner/zsh-autopair \
  zdharma-continuum/fast-syntax-highlighting \
  MichaelAquilina/zsh-you-should-use \
  zsh-users/zsh-autosuggestions \
  Aloxaf/fzf-tab
zi light zsh-users/zsh-history-substring-search
zi light zsh-users/zsh-completions
zi light zdharma-continuum/history-search-multi-word
zi ice lucid wait='0' atinit='zpcompinit'
zi light zdharma-continuum/fast-syntax-highlighting # 语法高亮
zi ice lucid wait="0" atload='_zsh_autosuggest_start'
zi light zsh-users/zsh-autosuggestions # 自动建议,C-f/Right应用建议
zi ice lucid wait="0"
zi light zsh-users/zsh-autosuggestions # 根据子串搜索历史命令
zi ice depth=1
zi light romkatv/powerlevel10k # 加载主题
# zi for \
#     from'gh-r' \
#     sbin'**/starship -> starship' \
#   starship/starship # 加载starship
# OMZ:
    zi snippet OMZL::completion.zsh                                 # 加载框架
    zi snippet OMZL::functions.zsh                                  # 杂项函数
    zi snippet OMZL::directories.zsh                                # 目录相关的快捷操作
    zi snippet OMZL::history.zsh                                    # 加载历史
    zi snippet OMZL::clipboard.zsh                                  # 剪贴板
    zi snippet OMZL::termsupport.zsh                                # 终端支持
    zi snippet OMZL::key-bindings.zsh                               # 快捷键绑定
    zi snippet OMZL::git.zsh                                        # Git相关函数
    zi snippet OMZL::grep.zsh                                       # Grep相关别名
    zi snippet OMZL::misc.zsh                                       # 杂项
    zi snippet OMZP::z                                              # 快速跳转

    zinit ice svn
    zi snippet OMZP::aliases                                        # 别名管理
    zi snippet OMZP::colored-man-pages                              # 彩色man文档
    zi snippet OMZP::sudo                                           # 快速sudo
    zi snippet OMZP::vi-mode                                        # vi模式
    zi snippet OMZP::extract                                        # 解压
    zi ice lucid wait='1'
    zi snippet OMZP::git                                            # Git相关别名
    zi snippet OMZP::hitokoto                                       # 一言

    unalias lsa l ll la _                                           # 去除无用别名
# OMZ: end
hitokoto # 自动显示一言
# fzf
zi for \
    from'gh-r'  \
    sbin'fzf'   \
  junegunn/fzf
# fzf键绑定
zi for \
    https://github.com/junegunn/fzf/raw/master/shell/{'completion','key-bindings'}.zsh
# zstyle:
    zstyle ':completion:*:git-checkout:*' sort         false                      # 禁用`git checkout`的排序
    zstyle ':completion:*:descriptions'   format       '[%d]'                     # 组支持
    zstyle ':completion:*'                list-colors  ${(s.:.)LS_COLORS}         # 启用文件名颜色
    zstyle ':fzf-tab:complete:cd:*'       fzf-preview  'eza --icons -1 $realpath' # fzf显示目录中的文件夹
    zstyle ':fzf-tab:*'                   switch-group ',' '.'                    # fzf使用','和'.'切换组
# zstyle: end

source "$ZDOTDIR/.zsh/apps.zsh"    # 一些软件
source "$ZDOTDIR/.zsh/aliases.zsh" # 一些别名
source "$ZDOTDIR/.zsh/options.zsh" # 一些设置

# To customize prompt, run `p10k configure` or edit $POWERLEVEL9K_CONFIG_FILE.
[[ ! -f $POWERLEVEL9K_CONFIG_FILE ]] || source $POWERLEVEL9K_CONFIG_FILE

# Github ssh-agent autostart
env=~/.ssh/agent.env
agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }
agent_start () {
    (umask 077; ssh-agent >| "$env")
    . "$env" >| /dev/null ; }
agent_load_env

# agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running
agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)
if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
    agent_start
    ssh-add
elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then
    ssh-add
fi
unset env

# eval "$(starship init zsh)"
